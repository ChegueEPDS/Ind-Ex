import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { MsalService } from '@azure/msal-angular';
import { loginRequest } from './msal.config';
import { AuthenticationResult, AccountInfo } from '@azure/msal-browser';
import { environment } from '../../environments/environment'; // üîπ Import√°ld az environment f√°jlt

@Injectable({
  providedIn: 'root'
})
export class GraphService {
  private apiBaseUrl = `${environment.apiUrl}/api/graph`; // üîπ Most m√°r az environment-b≈ël veszi az URL-t

  constructor(private http: HttpClient, private msalService: MsalService) {
    // üîπ Be√°ll√≠tjuk az akt√≠v fi√≥kot, ha van bejelentkezett felhaszn√°l√≥
    const accounts = this.msalService.instance.getAllAccounts();
    if (accounts.length > 0) {
      this.msalService.instance.setActiveAccount(accounts[0]);
    }
  }

  async getAccessToken(): Promise<string | null> {
    try {
        let activeAccount = this.msalService.instance.getActiveAccount();

        if (!activeAccount) {
            console.warn('‚ö†Ô∏è Nincs akt√≠v bejelentkezett fi√≥k, megpr√≥b√°ljuk be√°ll√≠tani...');
            const accounts = this.msalService.instance.getAllAccounts();
            if (accounts.length > 0) {
                this.msalService.instance.setActiveAccount(accounts[0]);
                activeAccount = accounts[0];
                console.log("‚úÖ Akt√≠v fi√≥k be√°ll√≠tva:", activeAccount);
            } else {
                console.error('‚ùå Nincs akt√≠v bejelentkezett fi√≥k. Jelentkezz be √∫jra!');
                return null;
            }
        }

        // üîπ Token lek√©r√©se h√°tt√©rben (silent m√≥d)
        try {
            const response = await this.msalService.instance.acquireTokenSilent({
                ...loginRequest,
                account: activeAccount
            });
            console.log('‚úÖ Microsoft Graph Access Token megszerezve:', response.accessToken);
            return response.accessToken;
        } catch (silentError) {
            console.warn("‚ö†Ô∏è Silent token lek√©r√©s sikertelen, interakt√≠v bejelentkez√©s sz√ºks√©ges:", silentError);

            // üîπ Ha sikertelen, interakt√≠v popup k√©r√©st k√ºld√ºnk
            const interactiveResponse = await this.msalService.instance.acquireTokenPopup(loginRequest);
            console.log('‚úÖ Microsoft Graph Access Token (popup) megszerezve:', interactiveResponse.accessToken);
            return interactiveResponse.accessToken;
        }
    } catch (error) {
        console.error("‚ùå Microsoft Graph Access Token lek√©r√©se sikertelen:", error);
        return null;
    }
}

async createFolder(folderName: string) {
  const accessToken = await this.getAccessToken();
  if (!accessToken) {
      console.error('‚ùå Nem siker√ºlt access tokent szerezni!');
      return;
  }

  console.log("üìå K√ºldend≈ë Access Token:", accessToken);

  const headers = new HttpHeaders({
      Authorization: `Bearer ${accessToken}`,  // üîπ Itt k√ºldj√ºk a Microsoft Graph tokent
      'Content-Type': 'application/json'
  });

  return this.http.post(`${this.apiBaseUrl}/onedrive/folder`, { folderName }, { headers }).toPromise();
}

async uploadFile(selectedFile: File, targetFolder: string) {
    const accessToken = await this.getAccessToken();
    if (!accessToken) {
      console.error("‚ùå Nem siker√ºlt access tokent szerezni!");
      return;
    }
  
    const formData = new FormData();
    formData.append("file", selectedFile);
    formData.append("folderName", targetFolder); // üìÇ Dinamikusan adhat√≥ meg a mappa
  
    const headers = new HttpHeaders({
      Authorization: `Bearer ${accessToken}`,
    });
  
    return this.http.post(`${this.apiBaseUrl}/onedrive/upload`, formData, { headers }).toPromise();
  }
}